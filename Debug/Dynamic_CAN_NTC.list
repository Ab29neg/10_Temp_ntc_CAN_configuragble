
Dynamic_CAN_NTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a0c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08001b1c  08001b1c  00002b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b28  08001b28  00003064  2**0
                  CONTENTS
  4 .ARM          00000000  08001b28  08001b28  00003064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b28  08001b28  00003064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b28  08001b28  00002b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b2c  08001b2c  00002b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08001b30  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000064  08001b94  00003064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08001b94  000031c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012c8  00000000  00000000  0000308d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000626  00000000  00000000  00004355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00004980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000162  00000000  00000000  00004b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c47  00000000  00000000  00004cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024dc  00000000  00000000  0001a919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ece6  00000000  00000000  0001cdf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009badb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ac8  00000000  00000000  0009bb20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0009c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08001b04 	.word	0x08001b04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08001b04 	.word	0x08001b04

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <delay>:
volatile float B_value = 3614.0f;
volatile float R0_value = 10000.0f;


// ---------- Simple Delay Function ----------
void delay(volatile uint32_t count) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    while (count--);
 8000fd8:	bf00      	nop
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	1e5a      	subs	r2, r3, #1
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1fa      	bne.n	8000fda <delay+0xa>
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <can_init>:
    CAN1->sFilterRegister[0].FR2 = 0x00000000;

    CAN1->FMR &= ~CAN_FMR_FINIT;        // Exit filter init
}

void can_init(void) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000ff4:	4b45      	ldr	r3, [pc, #276]	@ (800110c <can_init+0x11c>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a44      	ldr	r2, [pc, #272]	@ (800110c <can_init+0x11c>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8001000:	4b42      	ldr	r3, [pc, #264]	@ (800110c <can_init+0x11c>)
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	4a41      	ldr	r2, [pc, #260]	@ (800110c <can_init+0x11c>)
 8001006:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800100a:	61d3      	str	r3, [r2, #28]

    // PA12 (TX) as AF Push-Pull
    GPIOA->CRH &= ~(0xF << 16);
 800100c:	4b40      	ldr	r3, [pc, #256]	@ (8001110 <can_init+0x120>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a3f      	ldr	r2, [pc, #252]	@ (8001110 <can_init+0x120>)
 8001012:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001016:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |=  (0xB << 16);
 8001018:	4b3d      	ldr	r3, [pc, #244]	@ (8001110 <can_init+0x120>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a3c      	ldr	r2, [pc, #240]	@ (8001110 <can_init+0x120>)
 800101e:	f443 2330 	orr.w	r3, r3, #720896	@ 0xb0000
 8001022:	6053      	str	r3, [r2, #4]

    // PA11 (RX) as Input Floating
    GPIOA->CRH &= ~(0xF << 12);
 8001024:	4b3a      	ldr	r3, [pc, #232]	@ (8001110 <can_init+0x120>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4a39      	ldr	r2, [pc, #228]	@ (8001110 <can_init+0x120>)
 800102a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800102e:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |=  (0x4 << 12);
 8001030:	4b37      	ldr	r3, [pc, #220]	@ (8001110 <can_init+0x120>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4a36      	ldr	r2, [pc, #216]	@ (8001110 <can_init+0x120>)
 8001036:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103a:	6053      	str	r3, [r2, #4]

    // CAN init
    CAN1->MCR &= ~CAN_MCR_SLEEP;
 800103c:	4b35      	ldr	r3, [pc, #212]	@ (8001114 <can_init+0x124>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a34      	ldr	r2, [pc, #208]	@ (8001114 <can_init+0x124>)
 8001042:	f023 0302 	bic.w	r3, r3, #2
 8001046:	6013      	str	r3, [r2, #0]
    while (CAN1->MSR & CAN_MSR_SLAK);
 8001048:	bf00      	nop
 800104a:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <can_init+0x124>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f9      	bne.n	800104a <can_init+0x5a>

    CAN1->MCR |= CAN_MCR_INRQ;
 8001056:	4b2f      	ldr	r3, [pc, #188]	@ (8001114 <can_init+0x124>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a2e      	ldr	r2, [pc, #184]	@ (8001114 <can_init+0x124>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6013      	str	r3, [r2, #0]
    while (!(CAN1->MSR & CAN_MSR_INAK));
 8001062:	bf00      	nop
 8001064:	4b2b      	ldr	r3, [pc, #172]	@ (8001114 <can_init+0x124>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f9      	beq.n	8001064 <can_init+0x74>

    // 500 kbps assuming 36 MHz PCLK1
    CAN1->BTR = 0x001c0000; // TS1=13, TS2=2, SJW=1, Prescaler=4
 8001070:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <can_init+0x124>)
 8001072:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8001076:	61da      	str	r2, [r3, #28]

    CAN1->MCR &= ~CAN_MCR_INRQ;
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <can_init+0x124>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a25      	ldr	r2, [pc, #148]	@ (8001114 <can_init+0x124>)
 800107e:	f023 0301 	bic.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]
    while (CAN1->MSR & CAN_MSR_INAK);
 8001084:	bf00      	nop
 8001086:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <can_init+0x124>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f9      	bne.n	8001086 <can_init+0x96>

    // Initialize CAN filter to accept all standard IDs
      CAN1->FMR |= CAN_FMR_FINIT;  // Enter filter init mode
 8001092:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <can_init+0x124>)
 8001094:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001098:	4a1e      	ldr	r2, [pc, #120]	@ (8001114 <can_init+0x124>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

      CAN1->FA1R |= 1 << 0;        // Activate filter 0
 80010a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001114 <can_init+0x124>)
 80010a4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80010a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001114 <can_init+0x124>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
      CAN1->FS1R |= 1 << 0;        // Set filter scale to 32-bit
 80010b2:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <can_init+0x124>)
 80010b4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80010b8:	4a16      	ldr	r2, [pc, #88]	@ (8001114 <can_init+0x124>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
      CAN1->FM1R &= ~(1 << 0);     // Identifier Mask mode
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <can_init+0x124>)
 80010c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80010c8:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <can_init+0x124>)
 80010ca:	f023 0301 	bic.w	r3, r3, #1
 80010ce:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
      CAN1->sFilterRegister[0].FR1 = 0x00000000;  // ID filter
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <can_init+0x124>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
      CAN1->sFilterRegister[0].FR2 = 0x00000000;  // ID mask
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <can_init+0x124>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
      CAN1->FFA1R &= ~(1 << 0);    // Assign filter to FIFO0
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <can_init+0x124>)
 80010e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80010e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <can_init+0x124>)
 80010ea:	f023 0301 	bic.w	r3, r3, #1
 80010ee:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      CAN1->FMR &= ~CAN_FMR_FINIT; // Exit filter init mode
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <can_init+0x124>)
 80010f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010f8:	4a06      	ldr	r2, [pc, #24]	@ (8001114 <can_init+0x124>)
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	40010800 	.word	0x40010800
 8001114:	40006400 	.word	0x40006400

08001118 <can_send>:

// ---------- Send a CAN Message ----------
void can_send(uint32_t id, uint8_t* data, uint8_t len) {
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	4613      	mov	r3, r2
 8001124:	71fb      	strb	r3, [r7, #7]
    while ((CAN1->TSR & CAN_TSR_TME0) == 0); // Wait for empty mailbox
 8001126:	bf00      	nop
 8001128:	4b26      	ldr	r3, [pc, #152]	@ (80011c4 <can_send+0xac>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f9      	beq.n	8001128 <can_send+0x10>

    // Load standard ID
    CAN1->sTxMailBox[0].TIR = (id << 21);      // 11-bit ID
 8001134:	4a23      	ldr	r2, [pc, #140]	@ (80011c4 <can_send+0xac>)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	055b      	lsls	r3, r3, #21
 800113a:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
    CAN1->sTxMailBox[0].TIR &= ~(CAN_TI0R_RTR | CAN_TI0R_IDE); // Data frame, standard ID
 800113e:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <can_send+0xac>)
 8001140:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8001144:	4a1f      	ldr	r2, [pc, #124]	@ (80011c4 <can_send+0xac>)
 8001146:	f023 0306 	bic.w	r3, r3, #6
 800114a:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180

    CAN1->sTxMailBox[0].TDTR = len;            // Data Length Code
 800114e:	4a1d      	ldr	r2, [pc, #116]	@ (80011c4 <can_send+0xac>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184

    // First 4 bytes (low)
    CAN1->sTxMailBox[0].TDLR = (data[3] << 24) | (data[2] << 16) |
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3303      	adds	r3, #3
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	061a      	lsls	r2, r3, #24
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3302      	adds	r3, #2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	041b      	lsls	r3, r3, #16
 8001166:	431a      	orrs	r2, r3
                               (data[1] << 8)  | data[0];
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3301      	adds	r3, #1
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	021b      	lsls	r3, r3, #8
    CAN1->sTxMailBox[0].TDLR = (data[3] << 24) | (data[2] << 16) |
 8001170:	4313      	orrs	r3, r2
                               (data[1] << 8)  | data[0];
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	431a      	orrs	r2, r3
    CAN1->sTxMailBox[0].TDLR = (data[3] << 24) | (data[2] << 16) |
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <can_send+0xac>)
 800117a:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    // Next 4 bytes (high)
    CAN1->sTxMailBox[0].TDHR = (data[7] << 24) | (data[6] << 16) |
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	3307      	adds	r3, #7
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	061a      	lsls	r2, r3, #24
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	3306      	adds	r3, #6
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	041b      	lsls	r3, r3, #16
 800118e:	431a      	orrs	r2, r3
                               (data[5] << 8)  | data[4];
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	3305      	adds	r3, #5
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	021b      	lsls	r3, r3, #8
    CAN1->sTxMailBox[0].TDHR = (data[7] << 24) | (data[6] << 16) |
 8001198:	4313      	orrs	r3, r2
                               (data[5] << 8)  | data[4];
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	3204      	adds	r2, #4
 800119e:	7812      	ldrb	r2, [r2, #0]
 80011a0:	431a      	orrs	r2, r3
    CAN1->sTxMailBox[0].TDHR = (data[7] << 24) | (data[6] << 16) |
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <can_send+0xac>)
 80011a4:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

    CAN1->sTxMailBox[0].TIR |= CAN_TI0R_TXRQ; // Request transmission
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <can_send+0xac>)
 80011aa:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80011ae:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <can_send+0xac>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40006400 	.word	0x40006400

080011c8 <can_receive>:

// ---------- Receive a CAN Message ----------
int can_receive(uint32_t *id, uint8_t *data, uint8_t *len) {
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	@ 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
    // Check if there's a message in FIFO0
    if ((CAN1->RF0R & CAN_RF0R_FMP0) == 0)
 80011d4:	4b25      	ldr	r3, [pc, #148]	@ (800126c <can_receive+0xa4>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <can_receive+0x1c>
        return 0; // No message available
 80011e0:	2300      	movs	r3, #0
 80011e2:	e03d      	b.n	8001260 <can_receive+0x98>

    // Get the message ID (Standard ID)
    *id = (CAN1->sFIFOMailBox[0].RIR >> 21) & 0x7FF;
 80011e4:	4b21      	ldr	r3, [pc, #132]	@ (800126c <can_receive+0xa4>)
 80011e6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 80011ea:	0d5b      	lsrs	r3, r3, #21
 80011ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	601a      	str	r2, [r3, #0]

    // Get data length (DLC)
    *len = CAN1->sFIFOMailBox[0].RDTR & 0xF;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <can_receive+0xa4>)
 80011f6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	b2da      	uxtb	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	701a      	strb	r2, [r3, #0]

    // Read data bytes
    uint32_t rdlr = CAN1->sFIFOMailBox[0].RDLR;
 8001206:	4b19      	ldr	r3, [pc, #100]	@ (800126c <can_receive+0xa4>)
 8001208:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800120c:	61bb      	str	r3, [r7, #24]
    uint32_t rdhr = CAN1->sFIFOMailBox[0].RDHR;
 800120e:	4b17      	ldr	r3, [pc, #92]	@ (800126c <can_receive+0xa4>)
 8001210:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8001214:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < 4; i++) {
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e017      	b.n	800124c <can_receive+0x84>
        data[i] = (rdlr >> (8 * i)) & 0xFF;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	fa22 f103 	lsr.w	r1, r2, r3
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	4413      	add	r3, r2
 800122c:	b2ca      	uxtb	r2, r1
 800122e:	701a      	strb	r2, [r3, #0]
        data[i + 4] = (rdhr >> (8 * i)) & 0xFF;
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	fa22 f103 	lsr.w	r1, r2, r3
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	b2ca      	uxtb	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b03      	cmp	r3, #3
 8001250:	dde4      	ble.n	800121c <can_receive+0x54>
    }

    // Release the FIFO (make it ready for the next message)
    CAN1->RF0R |= CAN_RF0R_RFOM0;
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <can_receive+0xa4>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4a05      	ldr	r2, [pc, #20]	@ (800126c <can_receive+0xa4>)
 8001258:	f043 0320 	orr.w	r3, r3, #32
 800125c:	60d3      	str	r3, [r2, #12]

    return 1; // Message received
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3724      	adds	r7, #36	@ 0x24
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40006400 	.word	0x40006400

08001270 <adc_init>:
// ---------- Initialize ADC1 ----------
void adc_init(void) {
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
    // Enable clocks for ADC1, GPIOA, and GPIOB
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN | RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN;
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <adc_init+0x5c>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	4a14      	ldr	r2, [pc, #80]	@ (80012cc <adc_init+0x5c>)
 800127c:	f443 7303 	orr.w	r3, r3, #524	@ 0x20c
 8001280:	6193      	str	r3, [r2, #24]

    // Set PA0–PA7 to analog mode (CRL: 8 pins)
    GPIOA->CRL = 0x00000000;
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <adc_init+0x60>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

    // PB0 and PB1 to analog mode (bits 0–7 of GPIOB->CRL)
    GPIOB->CRL &= ~(0xFF); // Clear bits for PB0 and PB1
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <adc_init+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a11      	ldr	r2, [pc, #68]	@ (80012d4 <adc_init+0x64>)
 800128e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001292:	6013      	str	r3, [r2, #0]
    // 0x00 = analog input mode for each pin (4 bits per pin)
    // No need to set anything since 0 already = analog input

    // Power on ADC and start calibration
    ADC1->CR2 |= ADC_CR2_ADON;
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <adc_init+0x68>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <adc_init+0x68>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6093      	str	r3, [r2, #8]
    for (volatile int i = 0; i < 1000; i++);
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	e002      	b.n	80012ac <adc_init+0x3c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3301      	adds	r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012b2:	dbf8      	blt.n	80012a6 <adc_init+0x36>
    ADC1->CR2 |= ADC_CR2_ADON;
 80012b4:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <adc_init+0x68>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4a07      	ldr	r2, [pc, #28]	@ (80012d8 <adc_init+0x68>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6093      	str	r3, [r2, #8]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010800 	.word	0x40010800
 80012d4:	40010c00 	.word	0x40010c00
 80012d8:	40012400 	.word	0x40012400

080012dc <adc_read>:

// ---------- Read ADC Value for a Given Channel ----------
uint16_t adc_read(uint8_t channel) {
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
    ADC1->SQR3 = channel;            // Set channel
 80012e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001318 <adc_read+0x3c>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_ADON;       // Start conversion
 80012ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <adc_read+0x3c>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4a09      	ldr	r2, [pc, #36]	@ (8001318 <adc_read+0x3c>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));
 80012f8:	bf00      	nop
 80012fa:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <adc_read+0x3c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f9      	beq.n	80012fa <adc_read+0x1e>
    return ADC1->DR;
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <adc_read+0x3c>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	b29b      	uxth	r3, r3
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40012400 	.word	0x40012400

0800131c <get_temp_int>:

// ---------- Convert ADC Value to Integer Temperature (°C) ----------
int16_t get_temp_int(uint16_t adc_val) {
 800131c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001320:	b088      	sub	sp, #32
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	80fb      	strh	r3, [r7, #6]
    float Vref = 3.3f;
 8001328:	4b3c      	ldr	r3, [pc, #240]	@ (800141c <get_temp_int+0x100>)
 800132a:	61fb      	str	r3, [r7, #28]
    float Vadc = (adc_val * Vref) / 4095.0f;
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fc84 	bl	8000c3c <__aeabi_i2f>
 8001334:	4603      	mov	r3, r0
 8001336:	69f9      	ldr	r1, [r7, #28]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fcd3 	bl	8000ce4 <__aeabi_fmul>
 800133e:	4603      	mov	r3, r0
 8001340:	4937      	ldr	r1, [pc, #220]	@ (8001420 <get_temp_int+0x104>)
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fd82 	bl	8000e4c <__aeabi_fdiv>
 8001348:	4603      	mov	r3, r0
 800134a:	61bb      	str	r3, [r7, #24]

    float R_fixed = 1000.0f;
 800134c:	4b35      	ldr	r3, [pc, #212]	@ (8001424 <get_temp_int+0x108>)
 800134e:	617b      	str	r3, [r7, #20]
    float R_ntc = (Vadc * R_fixed) / (Vref - Vadc);
 8001350:	6979      	ldr	r1, [r7, #20]
 8001352:	69b8      	ldr	r0, [r7, #24]
 8001354:	f7ff fcc6 	bl	8000ce4 <__aeabi_fmul>
 8001358:	4603      	mov	r3, r0
 800135a:	461c      	mov	r4, r3
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	69f8      	ldr	r0, [r7, #28]
 8001360:	f7ff fbb6 	bl	8000ad0 <__aeabi_fsub>
 8001364:	4603      	mov	r3, r0
 8001366:	4619      	mov	r1, r3
 8001368:	4620      	mov	r0, r4
 800136a:	f7ff fd6f 	bl	8000e4c <__aeabi_fdiv>
 800136e:	4603      	mov	r3, r0
 8001370:	613b      	str	r3, [r7, #16]

    float T0 = 298.15f;       // 25°C in Kelvin
 8001372:	4b2d      	ldr	r3, [pc, #180]	@ (8001428 <get_temp_int+0x10c>)
 8001374:	60fb      	str	r3, [r7, #12]

    float tempK = 1.0f / ((1.0f / T0) + (1.0f / B_value) * log(R_ntc / R0_value));
 8001376:	68f9      	ldr	r1, [r7, #12]
 8001378:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800137c:	f7ff fd66 	bl	8000e4c <__aeabi_fdiv>
 8001380:	4603      	mov	r3, r0
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f848 	bl	8000418 <__aeabi_f2d>
 8001388:	4604      	mov	r4, r0
 800138a:	460d      	mov	r5, r1
 800138c:	4b27      	ldr	r3, [pc, #156]	@ (800142c <get_temp_int+0x110>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001396:	f7ff fd59 	bl	8000e4c <__aeabi_fdiv>
 800139a:	4603      	mov	r3, r0
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f83b 	bl	8000418 <__aeabi_f2d>
 80013a2:	4680      	mov	r8, r0
 80013a4:	4689      	mov	r9, r1
 80013a6:	4b22      	ldr	r3, [pc, #136]	@ (8001430 <get_temp_int+0x114>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	6938      	ldr	r0, [r7, #16]
 80013ae:	f7ff fd4d 	bl	8000e4c <__aeabi_fdiv>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f82f 	bl	8000418 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f000 f9b5 	bl	8001730 <log>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4640      	mov	r0, r8
 80013cc:	4649      	mov	r1, r9
 80013ce:	f7ff f87b 	bl	80004c8 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4620      	mov	r0, r4
 80013d8:	4629      	mov	r1, r5
 80013da:	f7fe febf 	bl	800015c <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	f04f 0000 	mov.w	r0, #0
 80013e6:	4913      	ldr	r1, [pc, #76]	@ (8001434 <get_temp_int+0x118>)
 80013e8:	f7ff f998 	bl	800071c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fb18 	bl	8000a28 <__aeabi_d2f>
 80013f8:	4603      	mov	r3, r0
 80013fa:	60bb      	str	r3, [r7, #8]
    return (int16_t)(tempK - 273.15f); // Return integer °C
 80013fc:	490e      	ldr	r1, [pc, #56]	@ (8001438 <get_temp_int+0x11c>)
 80013fe:	68b8      	ldr	r0, [r7, #8]
 8001400:	f7ff fb66 	bl	8000ad0 <__aeabi_fsub>
 8001404:	4603      	mov	r3, r0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fdbc 	bl	8000f84 <__aeabi_f2iz>
 800140c:	4603      	mov	r3, r0
 800140e:	b21b      	sxth	r3, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800141a:	bf00      	nop
 800141c:	40533333 	.word	0x40533333
 8001420:	457ff000 	.word	0x457ff000
 8001424:	447a0000 	.word	0x447a0000
 8001428:	43951333 	.word	0x43951333
 800142c:	20000008 	.word	0x20000008
 8001430:	2000000c 	.word	0x2000000c
 8001434:	3ff00000 	.word	0x3ff00000
 8001438:	43889333 	.word	0x43889333

0800143c <main>:

// ---------- Main Program ----------
int main(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b08e      	sub	sp, #56	@ 0x38
 8001440:	af00      	add	r7, sp, #0
    can_init();     // Initialize CAN1 (PA11, PA12)
 8001442:	f7ff fdd5 	bl	8000ff0 <can_init>
    adc_init();     // Initialize ADC1 for PA0–PA9 analog input
 8001446:	f7ff ff13 	bl	8001270 <adc_init>

    base_id = ((high << 8) | low) & 0x7FF; // Compute initial 11-bit base CAN ID
 800144a:	4b68      	ldr	r3, [pc, #416]	@ (80015ec <main+0x1b0>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	4a67      	ldr	r2, [pc, #412]	@ (80015f0 <main+0x1b4>)
 8001452:	7812      	ldrb	r2, [r2, #0]
 8001454:	4313      	orrs	r3, r2
 8001456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800145a:	4a66      	ldr	r2, [pc, #408]	@ (80015f4 <main+0x1b8>)
 800145c:	6013      	str	r3, [r2, #0]

    uint8_t data0[8] = {0}, data1[8] = {0}; // Buffers for 10 temperatures
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_data[8], len;               // Buffer for received CAN data
    uint32_t rx_id;
    uint8_t test_data[8] = {0xAA, 0xBB, 0xCC, 0xDD, 1, 2, 3, 4};
 800146e:	4a62      	ldr	r2, [pc, #392]	@ (80015f8 <main+0x1bc>)
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001478:	e883 0003 	stmia.w	r3, {r0, r1}

    while (1) {
    	 can_send(base_id, test_data, 5);
 800147c:	4b5d      	ldr	r3, [pc, #372]	@ (80015f4 <main+0x1b8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f107 0108 	add.w	r1, r7, #8
 8001484:	2205      	movs	r2, #5
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fe46 	bl	8001118 <can_send>
        // ---------- Check for ID Change Command ----------
    	 if (can_receive(&rx_id, rx_data, &len)) {
 800148c:	f107 0217 	add.w	r2, r7, #23
 8001490:	f107 0118 	add.w	r1, r7, #24
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fe95 	bl	80011c8 <can_receive>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d05f      	beq.n	8001564 <main+0x128>
    	     if (rx_id == 0x8F && len >= 4 &&
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2b8f      	cmp	r3, #143	@ 0x8f
 80014a8:	d11d      	bne.n	80014e6 <main+0xaa>
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d91a      	bls.n	80014e6 <main+0xaa>
    	         rx_data[0] == high && rx_data[1] == low) {
 80014b0:	7e3a      	ldrb	r2, [r7, #24]
 80014b2:	4b4e      	ldr	r3, [pc, #312]	@ (80015ec <main+0x1b0>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
    	     if (rx_id == 0x8F && len >= 4 &&
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d115      	bne.n	80014e6 <main+0xaa>
    	         rx_data[0] == high && rx_data[1] == low) {
 80014ba:	7e7a      	ldrb	r2, [r7, #25]
 80014bc:	4b4c      	ldr	r3, [pc, #304]	@ (80015f0 <main+0x1b4>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d110      	bne.n	80014e6 <main+0xaa>
    	         high = rx_data[2];
 80014c4:	7eba      	ldrb	r2, [r7, #26]
 80014c6:	4b49      	ldr	r3, [pc, #292]	@ (80015ec <main+0x1b0>)
 80014c8:	701a      	strb	r2, [r3, #0]
    	         low  = rx_data[3];
 80014ca:	7efa      	ldrb	r2, [r7, #27]
 80014cc:	4b48      	ldr	r3, [pc, #288]	@ (80015f0 <main+0x1b4>)
 80014ce:	701a      	strb	r2, [r3, #0]
    	         base_id = ((high << 8) | low) & 0x7FF;
 80014d0:	4b46      	ldr	r3, [pc, #280]	@ (80015ec <main+0x1b0>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	4a46      	ldr	r2, [pc, #280]	@ (80015f0 <main+0x1b4>)
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	4313      	orrs	r3, r2
 80014dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014e0:	4a44      	ldr	r2, [pc, #272]	@ (80015f4 <main+0x1b8>)
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e03e      	b.n	8001564 <main+0x128>
    	     }
    	     else if (rx_id == 0x7F && len >= 4) {
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80014ea:	d110      	bne.n	800150e <main+0xd2>
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d90d      	bls.n	800150e <main+0xd2>
    	         // Change tim (delay)
    	         tim = (rx_data[0] << 24) | (rx_data[1] << 16) | (rx_data[2] << 8) | rx_data[3];
 80014f2:	7e3b      	ldrb	r3, [r7, #24]
 80014f4:	061a      	lsls	r2, r3, #24
 80014f6:	7e7b      	ldrb	r3, [r7, #25]
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	431a      	orrs	r2, r3
 80014fc:	7ebb      	ldrb	r3, [r7, #26]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	4313      	orrs	r3, r2
 8001502:	7efa      	ldrb	r2, [r7, #27]
 8001504:	4313      	orrs	r3, r2
 8001506:	461a      	mov	r2, r3
 8001508:	4b3c      	ldr	r3, [pc, #240]	@ (80015fc <main+0x1c0>)
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	e02a      	b.n	8001564 <main+0x128>
    	     }
    	     else if (rx_id == 0x6F && len >= 4) {
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	2b6f      	cmp	r3, #111	@ 0x6f
 8001512:	d112      	bne.n	800153a <main+0xfe>
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b03      	cmp	r3, #3
 8001518:	d90f      	bls.n	800153a <main+0xfe>
    	         // Change B_value
    	         uint32_t B_raw = (rx_data[3] << 24) | (rx_data[2] << 16) | (rx_data[1] << 8) | rx_data[0];
 800151a:	7efb      	ldrb	r3, [r7, #27]
 800151c:	061a      	lsls	r2, r3, #24
 800151e:	7ebb      	ldrb	r3, [r7, #26]
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	431a      	orrs	r2, r3
 8001524:	7e7b      	ldrb	r3, [r7, #25]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	4313      	orrs	r3, r2
 800152a:	7e3a      	ldrb	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	607b      	str	r3, [r7, #4]
    	         B_value = *((float*)&B_raw); // Interpret raw 32 bits as float
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a32      	ldr	r2, [pc, #200]	@ (8001600 <main+0x1c4>)
 8001536:	6013      	str	r3, [r2, #0]
    	     else if (rx_id == 0x6F && len >= 4) {
 8001538:	e014      	b.n	8001564 <main+0x128>
    	     }
    	     else if (rx_id == 0x5F && len >= 4) {
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	2b5f      	cmp	r3, #95	@ 0x5f
 800153e:	d111      	bne.n	8001564 <main+0x128>
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d90e      	bls.n	8001564 <main+0x128>
    	         // Change R0_value
    	         uint32_t R0_raw = (rx_data[0] << 24) | (rx_data[1] << 16) | (rx_data[2] << 8) | rx_data[3];
 8001546:	7e3b      	ldrb	r3, [r7, #24]
 8001548:	061a      	lsls	r2, r3, #24
 800154a:	7e7b      	ldrb	r3, [r7, #25]
 800154c:	041b      	lsls	r3, r3, #16
 800154e:	431a      	orrs	r2, r3
 8001550:	7ebb      	ldrb	r3, [r7, #26]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	4313      	orrs	r3, r2
 8001556:	7efa      	ldrb	r2, [r7, #27]
 8001558:	4313      	orrs	r3, r2
 800155a:	603b      	str	r3, [r7, #0]
    	         R0_value = *((float*)&R0_raw); // Interpret raw 32 bits as float
 800155c:	463b      	mov	r3, r7
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a28      	ldr	r2, [pc, #160]	@ (8001604 <main+0x1c8>)
 8001562:	6013      	str	r3, [r2, #0]
    	     }
    	 }


        // ---------- Read and Pack 10 Temperatures ----------
        for (int i = 0; i < 10; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	637b      	str	r3, [r7, #52]	@ 0x34
 8001568:	e023      	b.n	80015b2 <main+0x176>
            uint16_t adc = adc_read(i);        // Read ADC channel i
 800156a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff feb4 	bl	80012dc <adc_read>
 8001574:	4603      	mov	r3, r0
 8001576:	867b      	strh	r3, [r7, #50]	@ 0x32
            int16_t temp = get_temp_int(adc);  // Convert to °C (int)
 8001578:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fece 	bl	800131c <get_temp_int>
 8001580:	4603      	mov	r3, r0
 8001582:	863b      	strh	r3, [r7, #48]	@ 0x30
            if (i < 5)
 8001584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001586:	2b04      	cmp	r3, #4
 8001588:	dc08      	bgt.n	800159c <main+0x160>
                data0[i] = (uint8_t)temp;       // Store first 5 temps
 800158a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800158c:	b2d9      	uxtb	r1, r3
 800158e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001594:	4413      	add	r3, r2
 8001596:	460a      	mov	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	e007      	b.n	80015ac <main+0x170>
            else
                data1[i - 5] = (uint8_t)temp;   // Store next 5 temps
 800159c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800159e:	3b05      	subs	r3, #5
 80015a0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	3338      	adds	r3, #56	@ 0x38
 80015a6:	443b      	add	r3, r7
 80015a8:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (int i = 0; i < 10; i++) {
 80015ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ae:	3301      	adds	r3, #1
 80015b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80015b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b4:	2b09      	cmp	r3, #9
 80015b6:	ddd8      	ble.n	800156a <main+0x12e>
        }

        // Transmit Two CAN Messages
        can_send((base_id<<1 ) | 0, data0, 8); // Temps 0–4
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <main+0x1b8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80015c2:	2208      	movs	r2, #8
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fda7 	bl	8001118 <can_send>
        can_send((base_id<<1 ) | 1, data1, 8); // Temps 5–9
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <main+0x1b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	f107 0120 	add.w	r1, r7, #32
 80015d8:	2208      	movs	r2, #8
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fd9c 	bl	8001118 <can_send>

        delay(tim); // Wait ~1 second
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <main+0x1c0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fcf3 	bl	8000fd0 <delay>
    	 can_send(base_id, test_data, 5);
 80015ea:	e747      	b.n	800147c <main+0x40>
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000001 	.word	0x20000001
 80015f4:	20000080 	.word	0x20000080
 80015f8:	08001b1c 	.word	0x08001b1c
 80015fc:	20000004 	.word	0x20000004
 8001600:	20000008 	.word	0x20000008
 8001604:	2000000c 	.word	0x2000000c

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <NMI_Handler+0x4>

08001610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <UsageFault_Handler+0x4>

08001630 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001658:	f000 f82e 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800166c:	f7ff fff8 	bl	8001660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001670:	480b      	ldr	r0, [pc, #44]	@ (80016a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001672:	490c      	ldr	r1, [pc, #48]	@ (80016a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001674:	4a0c      	ldr	r2, [pc, #48]	@ (80016a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a09      	ldr	r2, [pc, #36]	@ (80016ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001688:	4c09      	ldr	r4, [pc, #36]	@ (80016b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001696:	f000 f827 	bl	80016e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169a:	f7ff fecf 	bl	800143c <main>
  bx lr
 800169e:	4770      	bx	lr
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80016a8:	08001b30 	.word	0x08001b30
  ldr r2, =_sbss
 80016ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80016b0:	200001c0 	.word	0x200001c0

080016b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC1_2_IRQHandler>
	...

080016b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <HAL_IncTick+0x1c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <HAL_IncTick+0x20>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a03      	ldr	r2, [pc, #12]	@ (80016d8 <HAL_IncTick+0x20>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000010 	.word	0x20000010
 80016d8:	20000084 	.word	0x20000084

080016dc <__errno>:
 80016dc:	4b01      	ldr	r3, [pc, #4]	@ (80016e4 <__errno+0x8>)
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000014 	.word	0x20000014

080016e8 <__libc_init_array>:
 80016e8:	b570      	push	{r4, r5, r6, lr}
 80016ea:	2600      	movs	r6, #0
 80016ec:	4d0c      	ldr	r5, [pc, #48]	@ (8001720 <__libc_init_array+0x38>)
 80016ee:	4c0d      	ldr	r4, [pc, #52]	@ (8001724 <__libc_init_array+0x3c>)
 80016f0:	1b64      	subs	r4, r4, r5
 80016f2:	10a4      	asrs	r4, r4, #2
 80016f4:	42a6      	cmp	r6, r4
 80016f6:	d109      	bne.n	800170c <__libc_init_array+0x24>
 80016f8:	f000 fa04 	bl	8001b04 <_init>
 80016fc:	2600      	movs	r6, #0
 80016fe:	4d0a      	ldr	r5, [pc, #40]	@ (8001728 <__libc_init_array+0x40>)
 8001700:	4c0a      	ldr	r4, [pc, #40]	@ (800172c <__libc_init_array+0x44>)
 8001702:	1b64      	subs	r4, r4, r5
 8001704:	10a4      	asrs	r4, r4, #2
 8001706:	42a6      	cmp	r6, r4
 8001708:	d105      	bne.n	8001716 <__libc_init_array+0x2e>
 800170a:	bd70      	pop	{r4, r5, r6, pc}
 800170c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001710:	4798      	blx	r3
 8001712:	3601      	adds	r6, #1
 8001714:	e7ee      	b.n	80016f4 <__libc_init_array+0xc>
 8001716:	f855 3b04 	ldr.w	r3, [r5], #4
 800171a:	4798      	blx	r3
 800171c:	3601      	adds	r6, #1
 800171e:	e7f2      	b.n	8001706 <__libc_init_array+0x1e>
 8001720:	08001b28 	.word	0x08001b28
 8001724:	08001b28 	.word	0x08001b28
 8001728:	08001b28 	.word	0x08001b28
 800172c:	08001b2c 	.word	0x08001b2c

08001730 <log>:
 8001730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001732:	4604      	mov	r4, r0
 8001734:	460d      	mov	r5, r1
 8001736:	f000 f833 	bl	80017a0 <__ieee754_log>
 800173a:	4622      	mov	r2, r4
 800173c:	4606      	mov	r6, r0
 800173e:	460f      	mov	r7, r1
 8001740:	462b      	mov	r3, r5
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7ff f959 	bl	80009fc <__aeabi_dcmpun>
 800174a:	b998      	cbnz	r0, 8001774 <log+0x44>
 800174c:	2200      	movs	r2, #0
 800174e:	2300      	movs	r3, #0
 8001750:	4620      	mov	r0, r4
 8001752:	4629      	mov	r1, r5
 8001754:	f7ff f948 	bl	80009e8 <__aeabi_dcmpgt>
 8001758:	b960      	cbnz	r0, 8001774 <log+0x44>
 800175a:	2200      	movs	r2, #0
 800175c:	2300      	movs	r3, #0
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7ff f919 	bl	8000998 <__aeabi_dcmpeq>
 8001766:	b140      	cbz	r0, 800177a <log+0x4a>
 8001768:	f7ff ffb8 	bl	80016dc <__errno>
 800176c:	2322      	movs	r3, #34	@ 0x22
 800176e:	2600      	movs	r6, #0
 8001770:	4f06      	ldr	r7, [pc, #24]	@ (800178c <log+0x5c>)
 8001772:	6003      	str	r3, [r0, #0]
 8001774:	4630      	mov	r0, r6
 8001776:	4639      	mov	r1, r7
 8001778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800177a:	f7ff ffaf 	bl	80016dc <__errno>
 800177e:	2321      	movs	r3, #33	@ 0x21
 8001780:	6003      	str	r3, [r0, #0]
 8001782:	4803      	ldr	r0, [pc, #12]	@ (8001790 <log+0x60>)
 8001784:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001788:	f000 b804 	b.w	8001794 <nan>
 800178c:	fff00000 	.word	0xfff00000
 8001790:	08001b24 	.word	0x08001b24

08001794 <nan>:
 8001794:	2000      	movs	r0, #0
 8001796:	4901      	ldr	r1, [pc, #4]	@ (800179c <nan+0x8>)
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	7ff80000 	.word	0x7ff80000

080017a0 <__ieee754_log>:
 80017a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a4:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	460d      	mov	r5, r1
 80017ae:	b087      	sub	sp, #28
 80017b0:	da24      	bge.n	80017fc <__ieee754_log+0x5c>
 80017b2:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80017b6:	4304      	orrs	r4, r0
 80017b8:	d108      	bne.n	80017cc <__ieee754_log+0x2c>
 80017ba:	2200      	movs	r2, #0
 80017bc:	2300      	movs	r3, #0
 80017be:	2000      	movs	r0, #0
 80017c0:	49cb      	ldr	r1, [pc, #812]	@ (8001af0 <__ieee754_log+0x350>)
 80017c2:	f7fe ffab 	bl	800071c <__aeabi_ddiv>
 80017c6:	b007      	add	sp, #28
 80017c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017cc:	2900      	cmp	r1, #0
 80017ce:	da04      	bge.n	80017da <__ieee754_log+0x3a>
 80017d0:	f7fe fcc2 	bl	8000158 <__aeabi_dsub>
 80017d4:	2200      	movs	r2, #0
 80017d6:	2300      	movs	r3, #0
 80017d8:	e7f3      	b.n	80017c2 <__ieee754_log+0x22>
 80017da:	2200      	movs	r2, #0
 80017dc:	4bc5      	ldr	r3, [pc, #788]	@ (8001af4 <__ieee754_log+0x354>)
 80017de:	f7fe fe73 	bl	80004c8 <__aeabi_dmul>
 80017e2:	460b      	mov	r3, r1
 80017e4:	460d      	mov	r5, r1
 80017e6:	4602      	mov	r2, r0
 80017e8:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 80017ec:	48c2      	ldr	r0, [pc, #776]	@ (8001af8 <__ieee754_log+0x358>)
 80017ee:	4285      	cmp	r5, r0
 80017f0:	dd06      	ble.n	8001800 <__ieee754_log+0x60>
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7fe fcb1 	bl	800015c <__adddf3>
 80017fa:	e7e4      	b.n	80017c6 <__ieee754_log+0x26>
 80017fc:	2100      	movs	r1, #0
 80017fe:	e7f5      	b.n	80017ec <__ieee754_log+0x4c>
 8001800:	152c      	asrs	r4, r5, #20
 8001802:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8001806:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800180a:	440c      	add	r4, r1
 800180c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8001810:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8001814:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8001818:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 800181c:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8001820:	ea41 0305 	orr.w	r3, r1, r5
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	2200      	movs	r2, #0
 800182a:	4bb4      	ldr	r3, [pc, #720]	@ (8001afc <__ieee754_log+0x35c>)
 800182c:	f7fe fc94 	bl	8000158 <__aeabi_dsub>
 8001830:	1cab      	adds	r3, r5, #2
 8001832:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001836:	2b02      	cmp	r3, #2
 8001838:	4682      	mov	sl, r0
 800183a:	468b      	mov	fp, r1
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8001844:	dc53      	bgt.n	80018ee <__ieee754_log+0x14e>
 8001846:	2300      	movs	r3, #0
 8001848:	f7ff f8a6 	bl	8000998 <__aeabi_dcmpeq>
 800184c:	b1d0      	cbz	r0, 8001884 <__ieee754_log+0xe4>
 800184e:	2c00      	cmp	r4, #0
 8001850:	f000 8120 	beq.w	8001a94 <__ieee754_log+0x2f4>
 8001854:	4620      	mov	r0, r4
 8001856:	f7fe fdcd 	bl	80003f4 <__aeabi_i2d>
 800185a:	a391      	add	r3, pc, #580	@ (adr r3, 8001aa0 <__ieee754_log+0x300>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	4606      	mov	r6, r0
 8001862:	460f      	mov	r7, r1
 8001864:	f7fe fe30 	bl	80004c8 <__aeabi_dmul>
 8001868:	a38f      	add	r3, pc, #572	@ (adr r3, 8001aa8 <__ieee754_log+0x308>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	4604      	mov	r4, r0
 8001870:	460d      	mov	r5, r1
 8001872:	4630      	mov	r0, r6
 8001874:	4639      	mov	r1, r7
 8001876:	f7fe fe27 	bl	80004c8 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4620      	mov	r0, r4
 8001880:	4629      	mov	r1, r5
 8001882:	e7b8      	b.n	80017f6 <__ieee754_log+0x56>
 8001884:	a38a      	add	r3, pc, #552	@ (adr r3, 8001ab0 <__ieee754_log+0x310>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	4650      	mov	r0, sl
 800188c:	4659      	mov	r1, fp
 800188e:	f7fe fe1b 	bl	80004c8 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	2000      	movs	r0, #0
 8001898:	4999      	ldr	r1, [pc, #612]	@ (8001b00 <__ieee754_log+0x360>)
 800189a:	f7fe fc5d 	bl	8000158 <__aeabi_dsub>
 800189e:	4652      	mov	r2, sl
 80018a0:	4606      	mov	r6, r0
 80018a2:	460f      	mov	r7, r1
 80018a4:	465b      	mov	r3, fp
 80018a6:	4650      	mov	r0, sl
 80018a8:	4659      	mov	r1, fp
 80018aa:	f7fe fe0d 	bl	80004c8 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4630      	mov	r0, r6
 80018b4:	4639      	mov	r1, r7
 80018b6:	f7fe fe07 	bl	80004c8 <__aeabi_dmul>
 80018ba:	4606      	mov	r6, r0
 80018bc:	460f      	mov	r7, r1
 80018be:	b914      	cbnz	r4, 80018c6 <__ieee754_log+0x126>
 80018c0:	4632      	mov	r2, r6
 80018c2:	463b      	mov	r3, r7
 80018c4:	e0a0      	b.n	8001a08 <__ieee754_log+0x268>
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7fe fd94 	bl	80003f4 <__aeabi_i2d>
 80018cc:	a374      	add	r3, pc, #464	@ (adr r3, 8001aa0 <__ieee754_log+0x300>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	4680      	mov	r8, r0
 80018d4:	4689      	mov	r9, r1
 80018d6:	f7fe fdf7 	bl	80004c8 <__aeabi_dmul>
 80018da:	a373      	add	r3, pc, #460	@ (adr r3, 8001aa8 <__ieee754_log+0x308>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	4604      	mov	r4, r0
 80018e2:	460d      	mov	r5, r1
 80018e4:	4640      	mov	r0, r8
 80018e6:	4649      	mov	r1, r9
 80018e8:	f7fe fdee 	bl	80004c8 <__aeabi_dmul>
 80018ec:	e0a5      	b.n	8001a3a <__ieee754_log+0x29a>
 80018ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018f2:	f7fe fc33 	bl	800015c <__adddf3>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4650      	mov	r0, sl
 80018fc:	4659      	mov	r1, fp
 80018fe:	f7fe ff0d 	bl	800071c <__aeabi_ddiv>
 8001902:	e9cd 0100 	strd	r0, r1, [sp]
 8001906:	4620      	mov	r0, r4
 8001908:	f7fe fd74 	bl	80003f4 <__aeabi_i2d>
 800190c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7fe fdd6 	bl	80004c8 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001924:	f7fe fdd0 	bl	80004c8 <__aeabi_dmul>
 8001928:	a363      	add	r3, pc, #396	@ (adr r3, 8001ab8 <__ieee754_log+0x318>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	4680      	mov	r8, r0
 8001930:	4689      	mov	r9, r1
 8001932:	f7fe fdc9 	bl	80004c8 <__aeabi_dmul>
 8001936:	a362      	add	r3, pc, #392	@ (adr r3, 8001ac0 <__ieee754_log+0x320>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f7fe fc0e 	bl	800015c <__adddf3>
 8001940:	4642      	mov	r2, r8
 8001942:	464b      	mov	r3, r9
 8001944:	f7fe fdc0 	bl	80004c8 <__aeabi_dmul>
 8001948:	a35f      	add	r3, pc, #380	@ (adr r3, 8001ac8 <__ieee754_log+0x328>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fc05 	bl	800015c <__adddf3>
 8001952:	4642      	mov	r2, r8
 8001954:	464b      	mov	r3, r9
 8001956:	f7fe fdb7 	bl	80004c8 <__aeabi_dmul>
 800195a:	a35d      	add	r3, pc, #372	@ (adr r3, 8001ad0 <__ieee754_log+0x330>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	f7fe fbfc 	bl	800015c <__adddf3>
 8001964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001968:	f7fe fdae 	bl	80004c8 <__aeabi_dmul>
 800196c:	a35a      	add	r3, pc, #360	@ (adr r3, 8001ad8 <__ieee754_log+0x338>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001976:	4640      	mov	r0, r8
 8001978:	4649      	mov	r1, r9
 800197a:	f7fe fda5 	bl	80004c8 <__aeabi_dmul>
 800197e:	a358      	add	r3, pc, #352	@ (adr r3, 8001ae0 <__ieee754_log+0x340>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fbea 	bl	800015c <__adddf3>
 8001988:	4642      	mov	r2, r8
 800198a:	464b      	mov	r3, r9
 800198c:	f7fe fd9c 	bl	80004c8 <__aeabi_dmul>
 8001990:	a355      	add	r3, pc, #340	@ (adr r3, 8001ae8 <__ieee754_log+0x348>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe fbe1 	bl	800015c <__adddf3>
 800199a:	4642      	mov	r2, r8
 800199c:	464b      	mov	r3, r9
 800199e:	f7fe fd93 	bl	80004c8 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80019aa:	f7fe fbd7 	bl	800015c <__adddf3>
 80019ae:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80019b2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80019b6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80019ba:	3551      	adds	r5, #81	@ 0x51
 80019bc:	4335      	orrs	r5, r6
 80019be:	2d00      	cmp	r5, #0
 80019c0:	4680      	mov	r8, r0
 80019c2:	4689      	mov	r9, r1
 80019c4:	dd48      	ble.n	8001a58 <__ieee754_log+0x2b8>
 80019c6:	2200      	movs	r2, #0
 80019c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001b00 <__ieee754_log+0x360>)
 80019ca:	4650      	mov	r0, sl
 80019cc:	4659      	mov	r1, fp
 80019ce:	f7fe fd7b 	bl	80004c8 <__aeabi_dmul>
 80019d2:	4652      	mov	r2, sl
 80019d4:	465b      	mov	r3, fp
 80019d6:	f7fe fd77 	bl	80004c8 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4606      	mov	r6, r0
 80019e0:	460f      	mov	r7, r1
 80019e2:	4640      	mov	r0, r8
 80019e4:	4649      	mov	r1, r9
 80019e6:	f7fe fbb9 	bl	800015c <__adddf3>
 80019ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80019ee:	f7fe fd6b 	bl	80004c8 <__aeabi_dmul>
 80019f2:	4680      	mov	r8, r0
 80019f4:	4689      	mov	r9, r1
 80019f6:	b964      	cbnz	r4, 8001a12 <__ieee754_log+0x272>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4630      	mov	r0, r6
 80019fe:	4639      	mov	r1, r7
 8001a00:	f7fe fbaa 	bl	8000158 <__aeabi_dsub>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4650      	mov	r0, sl
 8001a0a:	4659      	mov	r1, fp
 8001a0c:	f7fe fba4 	bl	8000158 <__aeabi_dsub>
 8001a10:	e6d9      	b.n	80017c6 <__ieee754_log+0x26>
 8001a12:	a323      	add	r3, pc, #140	@ (adr r3, 8001aa0 <__ieee754_log+0x300>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001a1c:	f7fe fd54 	bl	80004c8 <__aeabi_dmul>
 8001a20:	a321      	add	r3, pc, #132	@ (adr r3, 8001aa8 <__ieee754_log+0x308>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	4604      	mov	r4, r0
 8001a28:	460d      	mov	r5, r1
 8001a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001a2e:	f7fe fd4b 	bl	80004c8 <__aeabi_dmul>
 8001a32:	4642      	mov	r2, r8
 8001a34:	464b      	mov	r3, r9
 8001a36:	f7fe fb91 	bl	800015c <__adddf3>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4630      	mov	r0, r6
 8001a40:	4639      	mov	r1, r7
 8001a42:	f7fe fb89 	bl	8000158 <__aeabi_dsub>
 8001a46:	4652      	mov	r2, sl
 8001a48:	465b      	mov	r3, fp
 8001a4a:	f7fe fb85 	bl	8000158 <__aeabi_dsub>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4620      	mov	r0, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	e7d9      	b.n	8001a0c <__ieee754_log+0x26c>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4650      	mov	r0, sl
 8001a5e:	4659      	mov	r1, fp
 8001a60:	f7fe fb7a 	bl	8000158 <__aeabi_dsub>
 8001a64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001a68:	f7fe fd2e 	bl	80004c8 <__aeabi_dmul>
 8001a6c:	4606      	mov	r6, r0
 8001a6e:	460f      	mov	r7, r1
 8001a70:	2c00      	cmp	r4, #0
 8001a72:	f43f af25 	beq.w	80018c0 <__ieee754_log+0x120>
 8001a76:	a30a      	add	r3, pc, #40	@ (adr r3, 8001aa0 <__ieee754_log+0x300>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001a80:	f7fe fd22 	bl	80004c8 <__aeabi_dmul>
 8001a84:	a308      	add	r3, pc, #32	@ (adr r3, 8001aa8 <__ieee754_log+0x308>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	460d      	mov	r5, r1
 8001a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001a92:	e729      	b.n	80018e8 <__ieee754_log+0x148>
 8001a94:	2000      	movs	r0, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	e695      	b.n	80017c6 <__ieee754_log+0x26>
 8001a9a:	bf00      	nop
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	fee00000 	.word	0xfee00000
 8001aa4:	3fe62e42 	.word	0x3fe62e42
 8001aa8:	35793c76 	.word	0x35793c76
 8001aac:	3dea39ef 	.word	0x3dea39ef
 8001ab0:	55555555 	.word	0x55555555
 8001ab4:	3fd55555 	.word	0x3fd55555
 8001ab8:	df3e5244 	.word	0xdf3e5244
 8001abc:	3fc2f112 	.word	0x3fc2f112
 8001ac0:	96cb03de 	.word	0x96cb03de
 8001ac4:	3fc74664 	.word	0x3fc74664
 8001ac8:	94229359 	.word	0x94229359
 8001acc:	3fd24924 	.word	0x3fd24924
 8001ad0:	55555593 	.word	0x55555593
 8001ad4:	3fe55555 	.word	0x3fe55555
 8001ad8:	d078c69f 	.word	0xd078c69f
 8001adc:	3fc39a09 	.word	0x3fc39a09
 8001ae0:	1d8e78af 	.word	0x1d8e78af
 8001ae4:	3fcc71c5 	.word	0x3fcc71c5
 8001ae8:	9997fa04 	.word	0x9997fa04
 8001aec:	3fd99999 	.word	0x3fd99999
 8001af0:	c3500000 	.word	0xc3500000
 8001af4:	43500000 	.word	0x43500000
 8001af8:	7fefffff 	.word	0x7fefffff
 8001afc:	3ff00000 	.word	0x3ff00000
 8001b00:	3fe00000 	.word	0x3fe00000

08001b04 <_init>:
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	bf00      	nop
 8001b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b0a:	bc08      	pop	{r3}
 8001b0c:	469e      	mov	lr, r3
 8001b0e:	4770      	bx	lr

08001b10 <_fini>:
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	bf00      	nop
 8001b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b16:	bc08      	pop	{r3}
 8001b18:	469e      	mov	lr, r3
 8001b1a:	4770      	bx	lr
